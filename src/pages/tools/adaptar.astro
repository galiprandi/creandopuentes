---
import Layout from '../../layouts/Layout.astro';
import { initialConversation } from '@/pages/tools/initialConversation';
import EmptyState from '@/components/tools/EmptyState.astro';
---

<Layout title="Adaptador de Evaluaciones">
  <div class="chat-container">
    <div id="conversation-container" class="conversation-container">
      <EmptyState />
      <div id="messages" class="messages">
        <!-- La conversación inicial se cargará aquí automáticamente -->
      </div>
    </div>
    
    <form id="chat-form" class="chat-form">
      <textarea 
        id="user-input" 
        class="user-input" 
        placeholder="Escribe tu mensaje aquí..." 
        rows="1"
      ></textarea>
      <button type="submit" class="send-button">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
        </svg>
      </button>
    </form>
  </div>
</Layout>

<style>
  .chat-container {
    display: flex;
    flex-direction: column;
    max-width: 1200px;
    width: 100%;
    height: calc(100vh - 150px);
    margin: 0 auto;
  }

  .conversation-container {
    flex-grow: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
  }

  .empty-state {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100%;
    text-align: center;
    max-width: 600px;
    margin: 0 auto;
  }

  .messages {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
  }

  .message {
    display: flex;
    max-width: 80%;
    max-width: 500px;
    padding: 12px 16px;
    border-radius: 12px;
    line-height: 1.4;
    animation: fadeIn 0.3s ease-in-out;
    overflow-wrap: break-word;
    word-break: break-word;
    font-size: 14px;
    font-family: 'Inter', sans-serif;
    margin: 8px 0;
    transition: background-color 0.2s ease;
  }

  .conversation-container .message.user {
    align-self: flex-end !important;
    width: max-content !important;
    margin-left: auto !important;
    background-color: #f5f5f5 !important;
    color: #333333 !important;
    padding: .5em 1em !important;
    border-radius: 1em !important;
    text-align: right !important;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1) !important;
    position: relative !important;
  }

  .conversation-container .message.user:hover {
    background-color: #e8e8e8 !important;
  }

  .conversation-container .message.user .prose {
    text-align: right !important;
  }

  .conversation-container .message.assistant {
    align-self: flex-start !important;
    background-color: #d1f7c4 !important;
    color: #333333 !important;
    border-radius: 1em !important;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1) !important;
    padding: .5em 1em !important;
    width: max-content !important;
    max-width: 80% !important;
  }

  .conversation-container .message.assistant .prose {
    text-align: justify !important;
  }

  .message-content {
    width: 100%;
  }

  .message-actions {
    display: flex;
    justify-content: flex-end;
    position: absolute;
    top: 8px;
    right: 8px;
    margin-top: 0.5rem;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
  }

  .message:hover .message-actions {
    opacity: 1;
  }

  .copy-button {
    background: none;
    border: none;
    cursor: pointer;
    color: #333333;
    padding: 0.25rem;
    border-radius: 0.25rem;
    display: flex;
    align-items: center;
    width: 16px;
    height: 16px;
  }

  .copy-button:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  .copy-button.copied {
    color: #4f8ef7;
  }

  .copy-tooltip {
    font-size: 12px;
    margin-left: 4px;
  }

  .chat-form {
    display: flex;
    padding: 1rem;
    border-top: 1px solid #e5e7eb;
    background-color: white;
    position: relative;
  }

  .user-input {
    flex-grow: 1;
    padding: 0.75rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    resize: none;
    max-height: 200px;
    outline: none;
  }

  .user-input:focus {
    border-color: #d1f7c4;
    box-shadow: 0 0 0 2px rgba(209, 247, 196, 0.3);
  }

  .send-button {
    background-color: var(--color-accent);
    color: white;
    border: none;
    border-radius: 0.5rem;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 0.5rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .send-button:hover {
    background-color: var(--color-accent);
    opacity: 0.9;
  }

  .typing-indicator {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem 1rem;
    color: #666;
    font-style: italic;
  }

  .dot {
    width: 0.5rem;
    height: 0.5rem;
    background-color: #666;
    border-radius: 50%;
    animation: bounce 1.4s infinite ease-in-out;
    display: inline-block;
  }

  .dot:nth-child(1) { animation-delay: 0s; }
  .dot:nth-child(2) { animation-delay: 0.2s; }
  .dot:nth-child(3) { animation-delay: 0.4s; }

  @keyframes bounce {
    0%, 80%, 100% { transform: scale(0); }
    40% { transform: scale(1); }
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Estilos para Markdown */
  .prose {
    width: 100%;
    font-size: 16px; /* Tamaño base de letra aumentado */
  }

  .prose h1 {
    font-size: 1.625rem; /* Aumentado desde 1.5rem */
    font-weight: bold;
    margin-top: 1.5rem;
    margin-bottom: 1rem;
  }

  .prose h2 {
    font-size: 1.375rem; /* Aumentado desde 1.25rem */
    font-weight: bold;
    margin-top: 1.25rem;
    margin-bottom: 0.75rem;
  }

  .prose h3 {
    font-size: 1.25rem; /* Aumentado desde 1.125rem */
    font-weight: bold;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
  }

  .prose p {
    margin-bottom: 0.75rem;
  }

  .prose ul, .prose ol {
    padding-left: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .prose ul {
    list-style-type: disc;
  }

  .prose ol {
    list-style-type: decimal;
  }

  .prose li {
    margin-bottom: 0.25rem;
  }

  .prose a {
    color: #0d96ae;
    text-decoration: underline;
  }

  .prose code {
    background-color: #f3f4f6;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: monospace;
  }

  .prose pre {
    background-color: #f3f4f6;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin-bottom: 1rem;
  }

  .prose blockquote {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    font-style: italic;
    margin-bottom: 1rem;
  }

  /* Ajustar el contenedor de mensajes */
  .conversation-container .messages {
    display: flex !important;
    flex-direction: column !important;
    gap: 1rem !important;
    padding: 1rem !important;
    overflow-y: auto !important;
  }

  /* Asegurar que el contenido del mensaje se muestre correctamente */
  .conversation-container .message-content {
    width: 100% !important;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .chat-container {
      height: calc(100vh - 150px);
    }
    
    .message {
      max-width: 90%;
    }
  }
</style>

<script>
  // Importar la librería marked para convertir Markdown a HTML
  import { marked } from 'marked';
  import { initialConversation } from './initialConversation.js';
  
  // Configurar marked para que funcione de forma sincrónica
  marked.setOptions({
    async: false
  });
  
  // Cargar la conversación inicial inmediatamente al cargar la página
  document.addEventListener('DOMContentLoaded', () => {
    // Importar la conversación inicial

    
    // Renderizar la conversación inicial
    const messagesContainer = document.getElementById('messages');
    if (messagesContainer) {
      // Aplicar estilos al contenedor de mensajes
      Object.assign(messagesContainer.style, {
        display: 'flex',
        flexDirection: 'column',
        gap: '1rem',
        padding: '1rem',
        overflowY: 'auto'
      });
      
      // Función para renderizar un mensaje
      /**
       * Renderiza un mensaje en la interfaz de chat
       * @param {Object} message - El mensaje a renderizar
       * @param {string} message.role - El rol del mensaje (user o assistant)
       * @param {string} message.content - El contenido del mensaje
       * @returns {HTMLElement} El elemento DOM del mensaje
       */
      const renderMessage = (message: typeof initialConversation[0]) => {
        if (!message || typeof message.role !== 'string' || typeof message.content !== 'string') {
          console.error('Mensaje inválido:', message);
          return document.createElement('div');
        }
        
        const messageEl = document.createElement('div');
        messageEl.className = `message ${message.role}`;
        
        // Aplicar estilos directamente al elemento
        if (message.role === 'user') {
          Object.assign(messageEl.style, {
            alignSelf: 'flex-end',
            width: 'max-content',
            marginLeft: 'auto',
            backgroundColor: '#f5f5f5',
            color: '#333333',
            padding: '0.5em 1em',
            borderRadius: '1em',
            textAlign: 'right',
            boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',
            position: 'relative',
            maxWidth: '80%'
          });
        } else if (message.role === 'assistant') {
          Object.assign(messageEl.style, {
            alignSelf: 'flex-start',
            width: 'max-content',
            backgroundColor: '#d1f7c4',
            color: '#333333',
            padding: '0.5em 1em',
            borderRadius: '1em',
            boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',
            maxWidth: '80%'
          });
        }
        
        const contentContainer = document.createElement('div');
        contentContainer.className = 'message-content';
        
        const htmlContent = document.createElement('div');
        htmlContent.className = 'prose max-w-none';
        
        if (message.role === 'user') {
          htmlContent.style.textAlign = 'right';
        } else if (message.role === 'assistant') {
          htmlContent.style.textAlign = 'justify';
        }
        
        // Convertir Markdown a HTML
        const markdownHtml = marked.parse(message.content) as string;
        htmlContent.innerHTML = markdownHtml;
        
        contentContainer.appendChild(htmlContent);
        messageEl.appendChild(contentContainer);
        return messageEl;
      };
      
      // Renderizar cada mensaje
      initialConversation.forEach(msg => 
        messagesContainer.appendChild(renderMessage(msg))
      );
      
      // Ocultar el estado vacío
      const emptyState = document.querySelector('.empty-state');
      if (emptyState instanceof HTMLElement) 
        emptyState.style.display = 'none';
      
    }
  });
</script>

